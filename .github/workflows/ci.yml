name: Build, Test and Publish

on:
  push:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    name: Build and publish Docker image
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          npm install

      - name: Build React app
        run: |
          npm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: github.ref =='refs/heads/main'
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine latest tag
        if: github.ref =='refs/heads/main'
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment version
        if: github.ref =='refs/heads/main'
        id: increment_version
        run: |
          latest_tag="${{ env.latest_tag }}"
          if [[ $latest_tag =~ ^v([0-9]+)$ ]]; then
            version_number=${BASH_REMATCH[1]}
            new_version_number=$((version_number + 1))
            new_version="v$new_version_number"
          else
          new_version="v1"  # Default to v1 if no valid tag is found
          fi
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Tag new version
        if: github.ref =='refs/heads/main'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        if: github.ref =='refs/heads/main'
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/concertjournal:frontend-${{ env.new_version }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: BUILDKIT_INLINE_CACHE=1

      - name: Post cache
        if: always()
        run: |
          mkdir -p /tmp/.buildx-cache
          cp -r /tmp/.buildx-cache-new/* /tmp/.buildx-cache || true
